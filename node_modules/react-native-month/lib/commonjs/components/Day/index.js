"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Dot = _interopRequireDefault(require("../Dot"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styles = _reactNative.StyleSheet.create({
  activeDate: {
    backgroundColor: '#3b5998'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'white',
    flex: 1,
    marginVertical: 5,
    paddingVertical: 10
  },
  content: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  dotsContainer: {
    position: 'absolute',
    bottom: -5,
    flexDirection: 'row'
  },
  endDate: {
    borderBottomRightRadius: 60,
    borderTopRightRadius: 60
  },
  startDate: {
    borderBottomLeftRadius: 60,
    borderTopLeftRadius: 60
  },
  nonTouchableDayText: {
    color: '#d3d3d3'
  }
});

const NonTouchableDay = /*#__PURE__*/_react.default.memo(props => {
  const {
    isMonthDate,
    isActive,
    isOutOfRange,
    isStartDate,
    isEndDate,
    theme,
    dayTheme,
    date,
    isWeekend,
    isToday
  } = props;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, theme.dayContainerStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayContainerStyle, theme.nonTouchableDayContainerStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.nonTouchableDayContainerStyle, isWeekend ? theme.weekendContainerStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContainerStyle : {}, isToday && !isActive ? theme.todayContainerStyle : {}, isToday && !isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContainerStyle : {}, isOutOfRange ? theme.dayOutOfRangeContainerStyle : {}, isOutOfRange ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayOutOfRangeContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}, isEndDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.endDateContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}, isStartDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.startDateContainerStyle : {}]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.content, theme.dayContentStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayContentStyle, isWeekend ? theme.weekendContentStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContentStyle : {}, isActive ? theme.activeDayContentStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContentStyle : {}]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.nonTouchableDayText, theme.nonTouchableDayTextStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.nonTouchableDayTextStyle, isWeekend ? theme.weekendTextStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendTextStyle : {}, isMonthDate ? theme.nonTouchableLastMonthDayTextStyle : {}, isMonthDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.nonTouchableLastMonthDayTextStyle : {}, isToday ? theme.todayTextStyle : {}, isOutOfRange ? theme.dayOutOfRangeTextStyle : {}, isOutOfRange ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayOutOfRangeTextStyle : {}]
  }, date.getDate())));
}, (prevProps, nextProps) => {
  return prevProps.isActive === nextProps.isActive && prevProps.isVisible === nextProps.isVisible && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate;
});

const Day = /*#__PURE__*/_react.default.memo(props => {
  const {
    item: {
      date,
      isVisible,
      isActive,
      isStartDate,
      isEndDate,
      isMonthDate,
      isOutOfRange,
      isToday,
      isWeekend,
      isHidden
    },
    dots = [],
    dayTheme,
    theme
  } = props;
  const dayTextStyle = (0, _react.useMemo)(() => ({
    color: isActive ? 'white' : 'black'
  }), [isActive]);
  const renderDot = (0, _react.useCallback)((d, i) => {
    return /*#__PURE__*/_react.default.createElement(_Dot.default, _extends({
      key: i.toString(),
      active: isActive,
      index: i
    }, d, {
      dotContainerStyle: theme.dotContainerStyle
    }));
  }, [isActive, theme.dotContainerStyle]);

  if (isHidden) {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.container
    });
  }

  if (!isVisible) {
    return /*#__PURE__*/_react.default.createElement(NonTouchableDay, {
      isActive: isActive,
      date: date,
      theme: theme,
      isMonthDate: isMonthDate,
      isOutOfRange: isOutOfRange,
      isStartDate: isStartDate,
      isEndDate: isEndDate,
      isVisible: isVisible,
      isWeekend: isWeekend,
      isToday: isToday
    });
  } // Should render a maximum of 3 dots


  const finalDots = dots.slice(0, 3);
  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    testID: "day-pressable",
    style: [styles.container, theme.dayContainerStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayContainerStyle, isWeekend ? theme.weekendContainerStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContainerStyle : {}, isToday && !isActive ? theme.todayContainerStyle : {}, dayTheme && !isActive ? dayTheme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}, isStartDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.startDateContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}, isEndDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.endDateContainerStyle : {}],
    onPress: () => props.onPress(props.item.date)
  }, props.renderDayContent ? props.renderDayContent(props.item) : /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.content, theme.dayContentStyle, dayTheme ? dayTheme.dayContentStyle : {}, isWeekend ? theme.weekendContentStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContentStyle : {}, isActive ? theme.activeDayContentStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContentStyle : {}]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [dayTextStyle, theme.dayTextStyle, dayTheme && dayTheme.dayTextStyle, isWeekend ? theme.weekendTextStyle : {}, isToday ? theme.todayTextStyle : {}, isToday ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.todayTextStyle : {}, isActive ? theme.activeDayTextStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayTextStyle : {}]
  }, date.getDate()), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.dotsContainer
  }, finalDots.map(renderDot))));
}, (prevProps, nextProps) => {
  return prevProps.item.isActive === nextProps.item.isActive && prevProps.item.isVisible === nextProps.item.isVisible && prevProps.item.isStartDate === nextProps.item.isStartDate && prevProps.item.isEndDate === nextProps.item.isEndDate && prevProps.renderDayContent === nextProps.renderDayContent;
});

var _default = Day;
exports.default = _default;
//# sourceMappingURL=index.js.map