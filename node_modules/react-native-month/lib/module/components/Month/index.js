import React from 'react';
import { StyleSheet, View } from 'react-native';
import { getDayNames } from '../../utils/date';
import { getMonthDays, areEqual } from '../utils';
import WeekDays from '../WeekDays';
import Day from '../Day';
const styles = StyleSheet.create({
  weekContainer: {
    flexDirection: 'row'
  }
});
export default /*#__PURE__*/React.memo(props => {
  const {
    month,
    year,
    onPress,
    locale = 'en',
    dayNames,
    showWeekdays,
    disabledDays = {},
    disableRange = false,
    disableOffsetDays = false,
    firstDayMonday = true,
    startDate,
    endDate,
    minDate,
    maxDate,
    markedDays = {},
    theme = {},
    renderDayContent,
    showSixWeeks = false
  } = props;
  const DAY_NAMES = Array.isArray(dayNames) && dayNames.length === 7 ? dayNames : getDayNames(locale, firstDayMonday);
  const days = getMonthDays(month, year, firstDayMonday, disableRange, disabledDays, disableOffsetDays, startDate, endDate, minDate, maxDate, showSixWeeks);
  const weeks = [];

  while (days.length) {
    weeks.push(days.splice(0, 7));
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, showWeekdays && /*#__PURE__*/React.createElement(WeekDays, {
    days: DAY_NAMES,
    theme: theme
  }), weeks.map((week, index) => /*#__PURE__*/React.createElement(View, {
    key: String(index),
    style: styles.weekContainer
  }, week.map(day => {
    var _markedDays$day$id, _markedDays$day$id2;

    return /*#__PURE__*/React.createElement(Day, {
      key: day.key,
      item: day,
      dots: (_markedDays$day$id = markedDays[day.id]) === null || _markedDays$day$id === void 0 ? void 0 : _markedDays$day$id.dots,
      dayTheme: (_markedDays$day$id2 = markedDays[day.id]) === null || _markedDays$day$id2 === void 0 ? void 0 : _markedDays$day$id2.theme,
      onPress: onPress,
      theme: theme,
      renderDayContent: renderDayContent
    });
  }))));
}, areEqual);
//# sourceMappingURL=index.js.map