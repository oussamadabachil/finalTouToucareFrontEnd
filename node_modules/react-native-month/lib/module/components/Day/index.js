function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useMemo } from 'react';
import { StyleSheet, TouchableOpacity, View, Text } from 'react-native';
import Dot from '../Dot';
const styles = StyleSheet.create({
  activeDate: {
    backgroundColor: '#3b5998'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'white',
    flex: 1,
    marginVertical: 5,
    paddingVertical: 10
  },
  content: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  dotsContainer: {
    position: 'absolute',
    bottom: -5,
    flexDirection: 'row'
  },
  endDate: {
    borderBottomRightRadius: 60,
    borderTopRightRadius: 60
  },
  startDate: {
    borderBottomLeftRadius: 60,
    borderTopLeftRadius: 60
  },
  nonTouchableDayText: {
    color: '#d3d3d3'
  }
});
const NonTouchableDay = /*#__PURE__*/React.memo(props => {
  const {
    isMonthDate,
    isActive,
    isOutOfRange,
    isStartDate,
    isEndDate,
    theme,
    dayTheme,
    date,
    isWeekend,
    isToday
  } = props;
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, theme.dayContainerStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayContainerStyle, theme.nonTouchableDayContainerStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.nonTouchableDayContainerStyle, isWeekend ? theme.weekendContainerStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContainerStyle : {}, isToday && !isActive ? theme.todayContainerStyle : {}, isToday && !isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContainerStyle : {}, isOutOfRange ? theme.dayOutOfRangeContainerStyle : {}, isOutOfRange ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayOutOfRangeContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}, isEndDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.endDateContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}, isStartDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.startDateContainerStyle : {}]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.content, theme.dayContentStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayContentStyle, isWeekend ? theme.weekendContentStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContentStyle : {}, isActive ? theme.activeDayContentStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContentStyle : {}]
  }, /*#__PURE__*/React.createElement(Text, {
    style: [styles.nonTouchableDayText, theme.nonTouchableDayTextStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.nonTouchableDayTextStyle, isWeekend ? theme.weekendTextStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendTextStyle : {}, isMonthDate ? theme.nonTouchableLastMonthDayTextStyle : {}, isMonthDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.nonTouchableLastMonthDayTextStyle : {}, isToday ? theme.todayTextStyle : {}, isOutOfRange ? theme.dayOutOfRangeTextStyle : {}, isOutOfRange ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayOutOfRangeTextStyle : {}]
  }, date.getDate())));
}, (prevProps, nextProps) => {
  return prevProps.isActive === nextProps.isActive && prevProps.isVisible === nextProps.isVisible && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate;
});
const Day = /*#__PURE__*/React.memo(props => {
  const {
    item: {
      date,
      isVisible,
      isActive,
      isStartDate,
      isEndDate,
      isMonthDate,
      isOutOfRange,
      isToday,
      isWeekend,
      isHidden
    },
    dots = [],
    dayTheme,
    theme
  } = props;
  const dayTextStyle = useMemo(() => ({
    color: isActive ? 'white' : 'black'
  }), [isActive]);
  const renderDot = useCallback((d, i) => {
    return /*#__PURE__*/React.createElement(Dot, _extends({
      key: i.toString(),
      active: isActive,
      index: i
    }, d, {
      dotContainerStyle: theme.dotContainerStyle
    }));
  }, [isActive, theme.dotContainerStyle]);

  if (isHidden) {
    return /*#__PURE__*/React.createElement(View, {
      style: styles.container
    });
  }

  if (!isVisible) {
    return /*#__PURE__*/React.createElement(NonTouchableDay, {
      isActive: isActive,
      date: date,
      theme: theme,
      isMonthDate: isMonthDate,
      isOutOfRange: isOutOfRange,
      isStartDate: isStartDate,
      isEndDate: isEndDate,
      isVisible: isVisible,
      isWeekend: isWeekend,
      isToday: isToday
    });
  } // Should render a maximum of 3 dots


  const finalDots = dots.slice(0, 3);
  return /*#__PURE__*/React.createElement(TouchableOpacity, {
    testID: "day-pressable",
    style: [styles.container, theme.dayContainerStyle, dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.dayContainerStyle, isWeekend ? theme.weekendContainerStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContainerStyle : {}, isToday && !isActive ? theme.todayContainerStyle : {}, dayTheme && !isActive ? dayTheme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}, isStartDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.startDateContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}, isEndDate ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.endDateContainerStyle : {}],
    onPress: () => props.onPress(props.item.date)
  }, props.renderDayContent ? props.renderDayContent(props.item) : /*#__PURE__*/React.createElement(View, {
    style: [styles.content, theme.dayContentStyle, dayTheme ? dayTheme.dayContentStyle : {}, isWeekend ? theme.weekendContentStyle : {}, isWeekend ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.weekendContentStyle : {}, isActive ? theme.activeDayContentStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayContentStyle : {}]
  }, /*#__PURE__*/React.createElement(Text, {
    style: [dayTextStyle, theme.dayTextStyle, dayTheme && dayTheme.dayTextStyle, isWeekend ? theme.weekendTextStyle : {}, isToday ? theme.todayTextStyle : {}, isToday ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.todayTextStyle : {}, isActive ? theme.activeDayTextStyle : {}, isActive ? dayTheme === null || dayTheme === void 0 ? void 0 : dayTheme.activeDayTextStyle : {}]
  }, date.getDate()), /*#__PURE__*/React.createElement(View, {
    style: styles.dotsContainer
  }, finalDots.map(renderDot))));
}, (prevProps, nextProps) => {
  return prevProps.item.isActive === nextProps.item.isActive && prevProps.item.isVisible === nextProps.item.isVisible && prevProps.item.isStartDate === nextProps.item.isStartDate && prevProps.item.isEndDate === nextProps.item.isEndDate && prevProps.renderDayContent === nextProps.renderDayContent;
});
export default Day;
//# sourceMappingURL=index.js.map