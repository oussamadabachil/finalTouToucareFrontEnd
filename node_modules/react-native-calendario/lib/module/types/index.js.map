{"version":3,"names":[],"sources":["index.tsx"],"sourcesContent":["import { ReactElement, RefObject } from 'react';\nimport { FlatList, ViewStyle, TextStyle, ViewToken } from 'react-native';\nimport { MarkedDays, ThemeType as MonthThemeType } from 'react-native-month';\n\nexport type RangeType = {\n  endDate?: Date;\n  startDate: Date;\n};\n\nexport type LocaleType = 'es' | 'en' | 'fr' | 'br' | 'zh' | 'ru';\n\nexport interface ThemeType extends MonthThemeType {\n  emptyMonthContainerStyle?: ViewStyle;\n  emptyMonthTextStyle?: TextStyle;\n  monthTitleTextStyle?: TextStyle;\n}\n\nexport type DayType = {\n  date: Date;\n  id: string;\n  isActive: boolean;\n  isEndDate: boolean;\n  isHidden: boolean;\n  isMonthDate: boolean;\n  isOutOfRange: boolean;\n  isStartDate: boolean;\n  isToday: boolean;\n  isVisible: boolean;\n};\n\nexport type ViewableItemsType = {\n  changed: ViewToken[];\n  viewableItems: ViewToken[];\n};\n\nexport interface CalendarProps {\n  /**\n   * FlatList's ref\n   *\n   * @deprecated\n   * @memberof CalendarProps\n   */\n  calendarListRef?: (ref: RefObject<FlatList<any>>) => void;\n\n  /**\n   * Array of names of the days of the week\n   *\n   * @type {string[]}\n   * @memberof CalendarProps\n   */\n  dayNames?: string[];\n\n  /**\n   * Use this prop to disable individual days\n   * key format: DD-MM-YYYY\n   * value: truthy value\n   *\n   * @type {{ [key: string]: any }}\n   * @memberof CalendarProps\n   */\n  disabledDays?: { [key: string]: any };\n\n  /**\n   * Hide days that do not belong to the month\n   *\n   * @type {boolean}\n   * @default false\n   * @memberof MonthProps\n   */\n  disableOffsetDays?: boolean;\n\n  /**\n   * Disable range selection\n   *\n   * @type {boolean}\n   * @default false\n   * @memberof MonthProps\n   */\n  disableRange?: boolean;\n\n  /**\n   * Selected end date\n   *\n   * @type {Date}\n   * @memberof CalendarProps\n   */\n  endDate?: Date;\n\n  /**\n   * FlatList's extraData prop\n   *\n   * @type {*}\n   * @deprecated\n   * @memberof CalendarProps\n   */\n  extraData?: any;\n\n  /**\n   * Monday as first day of the week\n   *\n   * @type {boolean}\n   * @default false\n   * @memberof CalendarProps\n   */\n  firstDayMonday?: boolean;\n\n  /**\n   * FlatList initialNumToRender\n   *\n   * @type {number}\n   * @memberof CalendarProps\n   */\n  initialListSize?: number;\n\n  /**\n   * Calendar language\n   *\n   * @type {LocaleType}\n   * @default en\n   * @memberof CalendarProps\n   */\n  locale?: LocaleType;\n\n  /**\n   * Multi-dot support on Day component\n   *\n   * @type {MarkedDays}\n   * @memberof CalendarProps\n   */\n  markedDays?: MarkedDays;\n\n  /**\n   * Maximum date that can be selected.\n   *\n   * @type {Date}\n   * @memberof CalendarProps\n   */\n  maxDate?: Date;\n\n  /**\n   * Minimum date that can be selected.\n   *\n   * @type {Date}\n   * @memberof CalendarProps\n   */\n  minDate?: Date;\n\n  /**\n   * Change Month row height\n   *\n   * @type {number}\n   * @memberof CalendarProps\n   */\n  monthHeight: number;\n\n  /**\n   * Array of names of each month\n   *\n   * @type {string[]}\n   * @memberof CalendarProps\n   */\n  monthNames?: string[];\n\n  /**\n   * Number of months to render\n   *\n   * @type {number}\n   * @memberof CalendarProps\n   */\n  numberOfMonths: number;\n\n  /**\n   * Day pressed\n   *\n   * @memberof CalendarProps\n   */\n  onPress: (date: Date) => void;\n\n  /**\n   * Use onPress\n   * @deprecated\n   * @memberof CalendarProps\n   */\n  onChange?: (range: RangeType) => void;\n  renderDayContent?: (day: DayType) => ReactElement;\n\n  /**\n   * Show Month title\n   *\n   * @type {boolean}\n   * @memberof CalendarProps\n   */\n  showMonthTitle?: boolean;\n\n  /**\n   * Show Week columns\n   *\n   * @type {boolean}\n   * @memberof CalendarProps\n   */\n  showWeekdays?: boolean;\n\n  /**\n   * Show FlatList's vertical scroll indicator\n   *\n   * @type {boolean}\n   * @memberof CalendarProps\n   */\n  showsVerticalScrollIndicator?: boolean;\n\n  /**\n   * Selected start date\n   *\n   * @type {Date}\n   * @memberof CalendarProps\n   */\n  startDate?: Date;\n\n  /**\n   * First month to render\n   *\n   * @type {string}\n   * @memberof CalendarProps\n   */\n  startingMonth?: string;\n\n  /**\n   * On Web FlatList's onViewableItemsChanged is not trigger, use this prop to render all months.\n   *\n   * @type {boolean}\n   * @memberof CalendarProps\n   */\n  renderAllMonths?: boolean;\n\n  /**\n   * Calculate Month's height dynamically.\n   * Use this if you won't render too many months as this affects the performance\n   * This is an experimental feature\n   *\n   * @type {boolean}\n   * @default false\n   * @memberof CalendarProps\n   */\n  calculateMonthHeightDynamically?: boolean;\n\n  theme?: ThemeType;\n  viewableItemsChanged?: (viableItems: ViewableItemsType) => void;\n  viewableRangeOffset?: number;\n}\n"],"mappings":""}