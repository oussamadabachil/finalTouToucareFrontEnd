"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _moment = _interopRequireDefault(require("moment"));
var _Month = _interopRequireDefault(require("./Month"));
var _useMonths = _interopRequireDefault(require("../hooks/use-months"));
var _useRange = _interopRequireDefault(require("../hooks/use-range"));
var _date = require("../utils/date");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NUMBER_OF_MONTHS = 12;
const MONTH_HEIGHT = 370;
const INITIAL_LIST_SIZE = 2;
const VIEWABLE_RANGE_OFFSET = 5;
const VIEWABILITY_CONFIG = {
  itemVisiblePercentThreshold: 10,
  minimumViewTime: 32
};
const Calendario = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    numberOfMonths = NUMBER_OF_MONTHS,
    startingMonth = (0, _moment.default)().format('YYYY-MM-DD'),
    initialListSize = INITIAL_LIST_SIZE,
    showWeekdays = true,
    showMonthTitle = true,
    theme = {},
    locale = 'en',
    disableRange = false,
    firstDayMonday = false,
    monthHeight = MONTH_HEIGHT,
    disableOffsetDays = false,
    viewableRangeOffset = VIEWABLE_RANGE_OFFSET,
    showsVerticalScrollIndicator,
    calculateMonthHeightDynamically,
    monthNames,
    onPress,
    dayNames,
    startDate,
    endDate
  } = props;
  const [dynamicLayoutScrollHasHappened, setDynamicLayoutScrollHasHappened] = (0, _react.useState)(false);
  const [listRendered, setListRendered] = (0, _react.useState)(false);
  const [firstViewableIndex, setFirstViewableIndex] = (0, _react.useState)(0);
  const [lastViewableIndex, setLastViewableIndex] = (0, _react.useState)(INITIAL_LIST_SIZE + viewableRangeOffset);
  const listReference = (0, _react.useRef)(null);
  const {
    months,
    firstMonth: firstMonthToRender
  } = (0, _useMonths.default)({
    numberOfMonths,
    startingMonth
  });
  const {
    start: localStartDate,
    end: localEndDate
  } = (0, _useRange.default)({
    startDate,
    endDate,
    firstMonthToRender,
    numberOfMonths
  });
  const firstMonthIndex = (0, _react.useMemo)(() => {
    if (localStartDate) {
      const monthIndex = (0, _date.getMonthIndex)(firstMonthToRender, localStartDate, months, numberOfMonths);
      if (monthIndex !== null) {
        return monthIndex;
      }
    }
    return 0;
  }, [firstMonthToRender, localStartDate, months, numberOfMonths]);
  (0, _react.useEffect)(() => {
    if (calculateMonthHeightDynamically && !dynamicLayoutScrollHasHappened && firstMonthIndex !== 0 && listRendered) {
      setTimeout(() => {
        if (listReference.current !== null) {
          setDynamicLayoutScrollHasHappened(true);
          listReference.current.scrollToIndex({
            index: firstMonthIndex,
            animated: true
          });
        }
      }, 0);
    }
  }, [calculateMonthHeightDynamically, dynamicLayoutScrollHasHappened, firstMonthIndex, listRendered]);
  (0, _react.useEffect)(() => {
    Calendar.layouts = [];
  }, [months]);
  const getItemLayout = (0, _react.useCallback)((_data, index) => {
    if (calculateMonthHeightDynamically) {
      if (index === -1 || !Calendar.layouts[index]) {
        return {
          index,
          length: 0,
          offset: 0
        };
      }
      const length = Calendar.layouts[index];
      const offset = Calendar.layouts.slice(0, index).reduce((a, c) => a + c, 0);
      return {
        length,
        offset,
        index
      };
    }
    return {
      length: monthHeight,
      offset: monthHeight * index,
      index
    };
  }, [calculateMonthHeightDynamically, monthHeight]);
  const keyExtractor = (0, _react.useCallback)((_item, index) => String(index), []);
  const onViewableItemsChanged = (0, _react.useCallback)(info => {
    if (props.viewableItemsChanged) {
      props.viewableItemsChanged(info);
    }
    if (props.renderAllMonths) {
      return;
    }
    const {
      viewableItems
    } = info;
    if (viewableItems.length > 0) {
      const {
        0: firstViewableItem,
        length: l,
        [l - 1]: lastViewableItem
      } = viewableItems;
      if (firstViewableIndex !== firstViewableItem.index || lastViewableIndex !== lastViewableItem.index) {
        setFirstViewableIndex(firstViewableItem.index);
        setLastViewableIndex(lastViewableItem.index + VIEWABLE_RANGE_OFFSET);
      }
    }
  }, [firstViewableIndex, lastViewableIndex, props]);
  const viewabilityConfigCallbackPairs = (0, _react.useRef)([{
    viewabilityConfig: VIEWABILITY_CONFIG,
    onViewableItemsChanged
  }]);
  const handleMonthLayout = (0, _react.useCallback)((index, e) => {
    if (calculateMonthHeightDynamically && !Calendar.layouts[index]) {
      Calendar.layouts[index] = e.nativeEvent.layout.height;
      if (index === firstMonthIndex) {
        setListRendered(true);
      }
    }
  }, [calculateMonthHeightDynamically, firstMonthIndex]);
  const handlePress = (0, _react.useCallback)(date => {
    if (onPress) {
      onPress(date);
    }
  }, [onPress]);
  const renderMonth = (0, _react.useCallback)(_ref => {
    let {
      index
    } = _ref;
    const month = (0, _moment.default)(firstMonthToRender).add(index, 'months');
    return /*#__PURE__*/_react.default.createElement(_Month.default, {
      month: month.month(),
      year: month.year(),
      index: index,
      firstMonthToRender: firstMonthToRender,
      monthNames: monthNames,
      onPress: handlePress,
      theme: theme,
      renderAllMonths: props.renderAllMonths,
      showWeekdays: showWeekdays,
      showMonthTitle: showMonthTitle,
      locale: locale,
      dayNames: dayNames,
      height: monthHeight,
      firstDayMonday: firstDayMonday,
      calculateMonthHeightDynamically: calculateMonthHeightDynamically,
      renderDayContent: props.renderDayContent,
      markedDays: props.markedDays,
      minDate: props.minDate,
      maxDate: props.maxDate,
      startDate: localStartDate,
      endDate: localEndDate,
      disableRange: disableRange,
      disabledDays: props.disabledDays,
      disableOffsetDays: disableOffsetDays,
      firstViewableIndex: firstViewableIndex,
      lastViewableIndex: lastViewableIndex,
      viewableRangeOffset: viewableRangeOffset,
      onMonthLayout: handleMonthLayout
    });
  }, [calculateMonthHeightDynamically, dayNames, disableOffsetDays, disableRange, firstDayMonday, firstMonthToRender, firstViewableIndex, handleMonthLayout, handlePress, lastViewableIndex, localEndDate, localStartDate, locale, monthHeight, monthNames, props.disabledDays, props.markedDays, props.maxDate, props.minDate, props.renderAllMonths, props.renderDayContent, showMonthTitle, showWeekdays, theme, viewableRangeOffset]);
  const isWeb = _reactNative.Platform.OS === 'web';
  const initialNumToRender = isWeb ? numberOfMonths : initialListSize;
  return /*#__PURE__*/_react.default.createElement(_reactNative.FlatList, {
    getItemLayout: !isWeb ? getItemLayout : undefined,
    initialScrollIndex: !isWeb && !calculateMonthHeightDynamically ? firstMonthIndex : 0,
    removeClippedSubviews: true,
    initialNumToRender: calculateMonthHeightDynamically && firstMonthIndex !== 0 ? months.length : initialNumToRender,
    keyExtractor: keyExtractor,
    viewabilityConfigCallbackPairs: viewabilityConfigCallbackPairs.current,
    showsVerticalScrollIndicator: showsVerticalScrollIndicator,
    renderItem: renderMonth,
    data: months,
    ref: ref
  });
});
exports.Calendar = Calendario;
Calendario.displayName = 'Calendar';
const Calendar = Object.assign(Calendario, {
  layouts: []
});
//# sourceMappingURL=Calendar.js.map